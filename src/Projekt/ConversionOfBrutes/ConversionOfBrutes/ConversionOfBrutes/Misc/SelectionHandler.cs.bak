using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using ConversionOfBrutes.GameObjects;
using ConversionOfBrutes.Graphic.Screen;
using ConversionOfBrutes.Library;
using Microsoft.Xna.Framework.Input;


//Author: luibrand, buerklij

namespace ConversionOfBrutes.Misc
{   
	[Serializable]
	public sealed class SelectionHandler
	{
		private const int SelectionRange = 4;
		//private const int SpawnzoneSelectRange = 60;

		private bool mNewSelection;
		private readonly LinkedList<WorldObject>[] mUnitGrouping;

		private LinkedList<WorldObject> mSelectedObjects = new LinkedList<WorldObject>(); // also includes a selected (spawn) zone

		public SelectionHandler()
		{
			mUnitGrouping = new LinkedList<WorldObject>[10];
			for (int i = 0; i < mUnitGrouping.Length; i++)
				mUnitGrouping[i] = new LinkedList<WorldObject>();
		}


		/// <summary>
		/// Draws the Selection line
		/// </summary>
		public void Draw()
		{
			// Draw Selection Area
			// TODO every 5th time?
			if (Main.Input.MouseState.LeftButton == ButtonState.Pressed)
			{
				Area a = new Area(Main.Input.MouseClickStartPosition, Main.Input.GetCurrentMousePosition());
				if(a.AreaSize() > 7)
					GameScreen.GraphicsManager.DrawArea(a);
			}
		}

		public void HandleSelection()
		{
			Vector2 destPosition;
			InputManager input = Main.Input;
			bool areaSelectedOrMouseClicked = input.MouseClicked() || input.IsAreaSelected();

			if (areaSelectedOrMouseClicked == false)
				return;

			LinkedList<WorldObject> currentlyPickedObj = new LinkedList<WorldObject>();

			// one click
			if (input.MouseClicked())
			{
				// this has to happen here
				destPosition = GameScreen.Camera.CalcWorldPosition(input.MouseClickPosition()); // in case of moving, this is where they should go

				var objectsInClickArea = GameScreen.Map.GetObjects(new Rectangle((int)destPosition.X, (int)destPosition.Y, SelectionRange, SelectionRange));
				WorldObject tmpPicked = null;
				// pick one object
				foreach (var obj in objectsInClickArea)
				{
					if (obj is Unit)
					{
						currentlyPickedObj.AddFirst(obj);
						break;
					}
					// TODO: Das ist nicht wirklich schön, aber es muss irgendwie sichergestellt werden, dass nur eine spawnzone ausgewählt wird, wenn keine unit vorhanden ist
					if (tmpPicked == null && (obj.Ident == Ident.Spawnzone || obj.Ident == Ident.Zone))
					{
						tmpPicked = obj;
					}

				}
				if (currentlyPickedObj.Count == 0 && tmpPicked != null)
				{
					currentlyPickedObj.AddFirst(tmpPicked);
				}

			}
			// area selecte
			else // if (input.IsAreaSelected())
			{
				// this has to happen here too
				destPosition = GameScreen.Camera.CalcWorldPosition(input.MouseClickPosition()); // in case of moving, this is where they should go

				var currentlySelectedFriends = new LinkedList<WorldObject>();
				var currentlySelectedEnemies = new LinkedList<WorldObject>();
				var currentlySelectedGaia = new LinkedList<WorldObject>();

				Area area1 = input.GetSelectedArea();
				Area selectedArea = new Area(GameScreen.Camera.CalcWorldPosition(area1.UpperLeft), GameScreen.Camera.CalcWorldPosition(area1.LowerRight));

				var objInSelectedArea = GameScreen.Map.GetObjects(selectedArea.ToRectangle());

				// pick units
				foreach (var obj in objInSelectedArea)
				{
					if (selectedArea.Intersects(obj.Area))
					{
						switch (obj.Fraction)
						{
							case Fraction.Player:
								currentlySelectedFriends.AddLast(obj);
								break;
							case Fraction.Ai:
								currentlySelectedEnemies.AddLast(obj);
								break;
							case Fraction.Gaia:
								if (obj.Ident == Ident.Spawnzone || obj.Ident == Ident.Zone)
									currentlySelectedGaia.AddLast(obj);
								break;
							default:
								throw new ArgumentOutOfRangeException();
						}
					}
				}

				// if friends are in the picked units => just pick friends
				//currentlyPickedObj = (currentlySelectedFriends.Count == 0) ? currentlySelectedEnemies : currentlySelectedFriends;
				if (currentlySelectedFriends.Count > 0)
				{
					currentlyPickedObj = currentlySelectedFriends;
				}
				else if (currentlySelectedEnemies.Count > 0)
				{
					currentlyPickedObj = currentlySelectedEnemies;
				}
				else
				{
					currentlyPickedObj = currentlySelectedGaia;
				}

				if (currentlyPickedObj.Count > 1)
				{
					if (currentlyPickedObj.All(ob => ob.Ident == Ident.Spawnzone || ob.Ident == Ident.Zone))
					{
						WorldObject zone = currentlyPickedObj.First.Value;
						currentlyPickedObj.Clear();
						currentlyPickedObj.AddFirst(zone);
					}
					else
					{
						LinkedListNode<WorldObject> obj = currentlyPickedObj.First;
						while (obj != null)
						{
							if (obj.Value is Zone)
							{
								LinkedListNode<WorldObject> dmy = obj.Next;
								currentlyPickedObj.Remove(obj);
								obj = dmy;
							}
							else
								obj = obj.Next;
							
						}
					}
				}
			}

			//=== Apply ActionIdent
			// just select unit
			if (input.UsedMouseButton == InputManager.MouseButton.Left)
			{
				while (currentlyPickedObj.Count > 54)
				{
					currentlyPickedObj.RemoveLast();
				}
				mSelectedObjects = currentlyPickedObj;
				mNewSelection = true;
			}
			// attack button
			else if (input.UsedMouseButton == InputManager.MouseButton.Right)
			{
				// no one selected or selected units are enemies => pick event
				if ((mSelectedObjects.Count == 0) || (mSelectedObjects.First.Value.Fraction == Fraction.Ai))
				{
					mSelectedObjects = currentlyPickedObj;
				}
				// selected objects are friends
				else
				{
					// Units are selected
					if (mSelectedObjects.First.Value.Ident != Ident.Spawnzone && mSelectedObjects.First.Value.Ident != Ident.Zone)
					{
						// no unit picked or (spawn-)zone picked => move there
						if (currentlyPickedObj.Count == 0 || currentlyPickedObj.First.Value.Ident == Ident.Spawnzone || currentlyPickedObj.First.Value.Ident == Ident.Zone)
						{
							GameScreen.ObjectManager.ApplyPulkWalk(mSelectedObjects, destPosition);
							foreach (var selectedObj in mSelectedObjects)
							{
								var unit = (Unit)selectedObj;
								unit.Attacking = false;
							}
							
						}
						else if (currentlyPickedObj.First.Value.Fraction == Fraction.Ai)
						{
							// everyone just attacks one (focus fire)
							var attackedUnit = (Unit) currentlyPickedObj.First.Value;
							foreach (var selectedObj in mSelectedObjects)
							{
								var unit = (Unit)selectedObj;
								unit.Attack(attackedUnit);
							}
							
						}
					}
					else if (mSelectedObjects.First.Value.Ident == Ident.Spawnzone) // Spawnzone is selected: set marker for Spawn
					{
						var zone = (SpawnZone) mSelectedObjects.First.Value;
						zone.UnitDestination = destPosition;
					}

				}
			}
		}

		public void UnitDied(Unit unit)
		{
			mSelectedObjects.Remove(unit);
		}

		public LinkedList<WorldObject> SelectedObjects { get { return mSelectedObjects; }
			set
			{
				mSelectedObjects = value;
				mNewSelection = true;
			}
		}

		public bool NewSelection {
			get
			{
				if (mNewSelection)
				{
					mNewSelection = false;
					return true;
				}
				return mNewSelection;
			}
			set { mNewSelection = value; }
		}

		public void GroupObjects(int groupNumber)
		{
			LinkedList<WorldObject> unitGroup = new LinkedList<WorldObject>();
			if (mSelectedObjects.Count > 0 && mSelectedObjects.First.Value.Fraction == Fraction.Player)
			{
				// delete from other groupings
				foreach (var group in mUnitGrouping)
				{
					if (group.Count > 0 && group != mSelectedObjects)
					{
						foreach (var currentlySelected in mSelectedObjects)
						{
							group.Remove(currentlySelected);
						}
					}
				}
				mUnitGrouping[groupNumber] = mSelectedObjects;
			}
			else
				mUnitGrouping[groupNumber] = new LinkedList<WorldObject>();
			/*foreach (var o in mSelectedObjects)
			{
				if (o.Fraction == Fraction.Player)
				{
					unitGroup.AddFirst(o);
				}
			}
			mUnitGrouping[groupNumber] = unitGroup;*/
		}

		public void SelectGroup(int groupNumber)
		{
			if (groupNumber < mUnitGrouping.Length)
				SelectedObjects = mUnitGrouping[groupNumber];
		}
	}
}
