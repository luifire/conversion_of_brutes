using System;
using System.Collections.Generic;
using ConversionOfBrutes.GameObjects;
using ConversionOfBrutes.Graphic.Screen;
using Microsoft.Xna.Framework;
using RVO;

//Author: luibrand

namespace ConversionOfBrutes.Misc
{
	static class CollisionHandler
	{
		private static readonly Random sRandom = new Random();

		private const int SmoothDistance = 5; // Additional Area for each Unit were no other unit should be

		public static void Update(LinkedList<Unit> listOfUnits, LinkedList<WorldObject> listOfWorldObjects)
		{
			Simulator.Instance.doStep();
			foreach (var unit in listOfUnits)
			{
				Vector2 pos = Simulator.Instance.getAgentPosition(unit.mCollisionId);
				if (float.IsNaN(pos.X) || float.IsNaN(pos.Y))
					throw new Exception("sags Lui #10");
				
				if (pos != unit.Position)
					unit.ChangePosition(pos);
			}
			
			// special collision avoidance for buildings
			foreach (var mapObj in listOfWorldObjects)
			{
				if (mapObj.Ident == Ident.Castle)
				{
					Rectangle smoothRectangle = new Rectangle(mapObj.Rect.X - SmoothDistance, mapObj.Rect.Y - SmoothDistance,
						mapObj.Rect.Width + 2 * SmoothDistance, mapObj.Rect.Height + 2 * SmoothDistance);

					var collidingObjects = GameScreen.Map.GetObjects(smoothRectangle);

					foreach (var collidingObj in collidingObjects)
					{
						if (collidingObj is Unit)
						{
							((Unit)collidingObj).FindNewWayToDestination();
						}
					}
					
				}
			}
		}

		public static Vector2 RandomVector2 { 
			get
			{
				return new Vector2((float) Main.Random.NextDouble(), (float) Main.Random.NextDouble());
				/*
				Vector2 v;
				do
				{
					v = new Vector2((float) Main.Random.NextDouble(), (float) Main.Random.NextDouble());
					if (float.IsNaN(v.X) || Math.Abs(v.X) < 0 && Math.Abs(v.Y) < 0)
						throw new Exception("sags Lui #666");

				} while (v.X == 0 && v.Y == 0);
				return v;*/
			} }
	}
}
