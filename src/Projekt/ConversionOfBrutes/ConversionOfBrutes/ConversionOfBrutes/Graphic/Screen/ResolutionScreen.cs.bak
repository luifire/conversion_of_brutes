/**
 * Author: David Spisla 
 * 
 * Concrete Class for the Resolution Menu
 * Usage: This Class Implements the Resolution Menu for the game  
 * Missing: 
 * - functionality of all buttons
 **/

using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace ConversionOfBrutes.Graphic.Screen
{
	class ResolutionScreen : Screen
	{ 
		
		/// <summary>
		/// Basic constructor for the ResolutionScreen
		/// </summary>
		public ResolutionScreen()
		{
			Initialize();	
		}


		public override sealed void Initialize()
		{
			GraphicsDeviceManager graphics = Main.Graphics;
			mScreenWidth = graphics.PreferredBackBufferWidth;
			mScreenHeight = graphics.PreferredBackBufferHeight;

			mTranslucent = false;
			mItems = new List<MenuButton>();
			mSpriteBatch = new SpriteBatch(graphics.GraphicsDevice);

			mBackground = new MenuLabel(MenuItem.MenuIdentifier.ResolutionScreen, ScaledRectangle(0, 0, 1920, 1080), null);
			
			System.Windows.Forms.Screen scr = System.Windows.Forms.Screen.PrimaryScreen;
			if (scr.Bounds.Width >= 1920 && scr.Bounds.Height >= 1080)
			{
				mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Resolution1920, ScaledRectangle(855, 200, 210, 100)));
			}

			if (scr.Bounds.Width >= 1400 && scr.Bounds.Height >= 900)
			{
				mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Resolution1400, ScaledRectangle(855, 300, 210, 100)));
			}

			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Fullscreen, ScaledRectangle(750, 700, 210, 100)));
			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Resolution1280, ScaledRectangle(855, 400, 210, 100)));
			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Resolution1024, ScaledRectangle(855, 500, 210, 100)));
			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Resolution800, ScaledRectangle(855, 600, 210, 100)));
			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.GameOptions, ScaledRectangle(855, 900, 210, 100)));
			mItems.Add(new MenuButton(MenuItem.MenuIdentifier.Windowed, ScaledRectangle(960, 700, 210, 100)));

			mIsLoading = true;

		}

		public override void Update()
		{

			TestMouseSlideOver();
			MenuButton button = MouseClickedGetButton(mItems);

			if (button != null)
			{

						switch (button.Identifier)
						{
							case MenuItem.MenuIdentifier.Resolution1920:
								Main.Graphics.PreferredBackBufferWidth = 1920;
								Main.Graphics.PreferredBackBufferHeight = 1080;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Resolution1400:
								Main.Graphics.PreferredBackBufferWidth = 1400;
								Main.Graphics.PreferredBackBufferHeight = 900;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Resolution1280:
								Main.Graphics.PreferredBackBufferWidth = 1280;
								Main.Graphics.PreferredBackBufferHeight = 720;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Resolution1024:
								Main.Graphics.PreferredBackBufferWidth = 1024;
								Main.Graphics.PreferredBackBufferHeight = 768;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Resolution800:
								Main.Graphics.PreferredBackBufferWidth = 800;
								Main.Graphics.PreferredBackBufferHeight = 600;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Fullscreen:
								Main.Graphics.IsFullScreen = true;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.Windowed:
								Main.Graphics.IsFullScreen = false;
								Main.Graphics.ApplyChanges();
								Initialize();
								break;
							case MenuItem.MenuIdentifier.GameOptions:
								mManager.RemoveScreen();
								mManager.GetPeek().Initialize();
								mManager.GetPeek().UpdateActivate();
								mManager.GetPeek().DrawActivate();
								break;
						
						}
					}
		}

		public override void Draw()
		{
			
			DrawButtonsAndBackground();

		}	
	}
}

